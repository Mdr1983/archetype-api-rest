name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      branch_name:
        description: 'Nombre de la rama a compilar/probar (ej. main, feature/mi-funcionalidad)'
        required: true
        default: 'main'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Environment verification
        run: |
          echo "OS:"
          cat /etc/os-release
          echo "Rama seleccionada para compilar: ${{ github.event.inputs.branch_name }}"
          echo "DOCKER_REGISTRY_URL: ${{ vars.DOCKER_REGISTRY_URL }}"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch_name }}

      - name: Set up JDK 24
        uses: actions/setup-java@v4
        with:
          java-version: '24'
          distribution: 'temurin'
          # cache: maven  -- Eliminado, no compatible con act-runner

      - name: Install and Verify Maven
        run: |
          sudo apt-get update
          sudo apt-get install -y maven || true 
          mvn -version
          which mvn
          ls -l $HOME/.m2/repository/ || echo "El repositorio local aún no existe."
          cat $HOME/.m2/settings.xml || echo "No se encontró settings.xml"
          find /usr/share/maven/ -name "settings.xml" 2>/dev/null || echo "No se encontró settings.xml por defecto"

      - name: Checkout settings.xml repository
        uses: actions/checkout@v4
        with:
          repository: Louzao/infra-config
          token: ${{ secrets.SETTINGS_REPO_PAT }}
          path: infra-config

      - name: Copy Maven settings.xml
        env:
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
          DOCKER_REGISTRY_USERNAME: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
          DOCKER_REGISTRY_PASSWORD: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
        run: |
          mkdir -p ~/.m2
          cp ./infra-config/ci-cd/settings.xml ~/.m2/settings.xml
          echo "Contenido de settings.xml:"
          cat ~/.m2/settings.xml

      - name: Build and Run Tests with Maven
        run: mvn clean install

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure Docker to allow insecure registries
        run: |
          echo '{ "insecure-registries": ["${{ vars.DOCKER_REGISTRY_URL }}"] }' > ~/.docker/config.json
          cat ~/.docker/config.json

      - name: Get Project Version and ArtifactId from pom.xml
        id: get_project_info
        run: |
          PROJECT_VERSION=$(mvn -q -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive org.codehaus.mojo:exec-maven-plugin:3.5.1:exec)
          echo "project_version=$PROJECT_VERSION" >> "$GITHUB_OUTPUT"
          PROJECT_ARTIFACT_ID=$(mvn -q -Dexec.executable="echo" -Dexec.args='${project.artifactId}' --non-recursive org.codehaus.mojo:exec-maven-plugin:3.5.1:exec)
          echo "project_artifact_id=$PROJECT_ARTIFACT_ID" >> "$GITHUB_OUTPUT"

      - name: Build and Push Docker Image with Jib
        run: |
          PROJECT_ARTIFACT_ID_LOWERCASE=$(echo "${{ steps.get_project_info.outputs.project_artifact_id }}" | tr '[:upper:]' '[:lower:]')
          PROJECT_VERSION=${{ steps.get_project_info.outputs.project_version }}
          IMAGE_BASE_NAME_WITH_VERSION="${PROJECT_ARTIFACT_ID_LOWERCASE}:${PROJECT_VERSION}"
          FULL_IMAGE_NAME="${{ vars.DOCKER_REGISTRY_URL }}/${IMAGE_BASE_NAME_WITH_VERSION}"

          mvn com.google.cloud.tools:jib-maven-plugin:3.4.1:build \
            -Dimage="${FULL_IMAGE_NAME}" \
            -Djib.from.image=eclipse-temurin:24-jre-alpine \
            -Djib.allowInsecureRegistries=true
